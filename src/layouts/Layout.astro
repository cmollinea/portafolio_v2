---
import { ViewTransitions } from 'astro:transitions';
import Meta from '../components/Meta.astro';
import OpenGraphFacebook from '../components/OpenGraphFacebook.astro';
import { LoadingScreen } from '../components/React/LoadingScreen';
import TwitterCard from '../components/TwitterCard.astro';

interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html
  lang='en'
  class='scroll-smooth bg-background text-foreground transition-colors ease-in-out'
>
  <head>
    <title>{title}</title>
    <Meta />
    <OpenGraphFacebook />
    <TwitterCard />
    <meta
      name='google-site-verification'
      content='HhawtBpenGliesOLyFP46TlYilTGbHHQIcUnLtvQp4w'
    />

    <link rel='preconnect' href='https://fonts.googleapis.com' />
    <link rel='preconnect' href='https://fonts.gstatic.com' crossorigin />
    <link
      href='https://fonts.googleapis.com/css2?family=Fira+Sans:ital,wght@0,400;1,600;1,700&display=swap'
      rel='stylesheet'
    />
  </head>

  <LoadingScreen client:load />

  <body>
    <slot />
  </body>
</html>

<style is:global>
  @tailwind base;
  @tailwind utilities;

  :root {
    --background: #f1f5f9;
    --primary: #4338ca;
    --foreground: #0a0a0a;
    --card: #e7eaee;
    --border: #0b0b0b1b;
  }

  .dark {
    --background: #050505;
    --primary: #4182d7;
    --foreground: #ccd2d5;
    --card: #11111167;
    --border: #5151517e;
  }

  html {
    font-family: 'Fira Sans', system-ui, sans-serif;
    background-size: 224px;
  }

  body {
    overflow: hidden;
  }

  code {
    font-family:
      Menlo,
      Monaco,
      Lucida Console,
      Liberation Mono,
      DejaVu Sans Mono,
      Bitstream Vera Sans Mono,
      Courier New,
      monospace;
  }

  @layer base {
    .bento-container {
      @apply border rounded-md border-neutral-500/20 p-6 bg-neutral-500/5;
    }
  }
</style>

<script is:inline>
  const getThemePreference = () => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme');
      console.log('Local Storage is defined');
    }
    return window.matchMedia('(prefers-color-scheme: dark)').matches
      ? 'dark'
      : 'light';
  };
  const isDark = getThemePreference() === 'dark';
  document.documentElement.classList[isDark ? 'add' : 'remove']('dark');

  if (typeof localStorage !== 'undefined') {
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains('dark');
      localStorage.setItem('theme', isDark ? 'dark' : 'light');
    });
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ['class']
    });
  }
</script>
